generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Model start from here
model Admin {
  id       String @id
  username String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // ✅ automatically updates on every update
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // ✅ automatically updates on every update

  parent   Parent? @relation(fields: [parentId], references: [id])
  parentId String?
  Class    Class?  @relation(fields: [classId], references: [id])
  classId  Int?
  grade    Grade?  @relation(fields: [gradeId], references: [id])
  gradeId  Int?

  attendances Attendance[]
  resultes    Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int
  students Student[]
  classes  Class[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [teacherId], references: [id])
  lessons       Lesson[]
  students      Student[]
  grade         Grade?         @relation(fields: [gradeId], references: [id])
  gradeId       Int?
  events        Event[]
  announcements Announcement[]
  teacherId     String?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  subject     Subject?     @relation(fields: [subjectId], references: [id])
  subjectId   Int?
  day         Day
  startTime   DateTime
  endTime     DateTime
  class       Class        @relation(fields: [classId], references: [id])
  classId     Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  Int?
  results   Result[]


  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  Int?
  results   Result[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  exam         Exam?       @relation(fields: [examId], references: [id])
  examId       Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  student      Student?    @relation(fields: [studentId], references: [id])
  studentId    String?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  Int?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  Class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  Class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ✅ automatically updates on every update
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  SATARDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
